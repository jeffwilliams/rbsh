#!/usr/bin/env ruby
# http://www.gnu.org/software/libc/manual/html_node/Implementing-a-Shell.html

# rb-readline gem. Tested with version 0.5.
require 'rb-readline'
require 'etc'
# ruby-termios. 0.9.6
require 'termios'
require 'getoptlong'
require 'pp'
require 'rbsh/job_control'
require 'rbsh/termcolor'

include Rbsh

$shell_name = "rbsh"
$verbose = false

opts = GetoptLong.new(
  [ '--verbose', '-v', GetoptLong::NO_ARGUMENT ],
) 

opts.each do |opt, arg|
  if opt == '--verbose'
    $verbose = true    
  end 
end   


class DirHistory
  def initialize(maxlen = 100)
    @maxlen = maxlen
    @history = []
    @curdir_index = -1
  end

  def forward
    if @curdir_index < @history.length-1
      @curdir_index += 1
      Dir.chdir @history[@curdir_index]
    end 
  end

  def back
    if @curdir_index > 0
      @curdir_index -= 1
      Dir.chdir @history[@curdir_index]
    end
  end

  def cd(dir)
    return if curdir == dir
    if @curdir_index < @history.length-1
      @history.pop @history.length-1-@curdir_index
    end

    @history.push dir
    @curdir_index += 1

    @history.shift(@maxlen-@history.length) if @history.length > @maxlen
  end

  def curdir
    @history[@curdir_index]
  end

  def to_s
    rc = Array.new(@history)
    rc[@curdir_index] = "*" + rc[@curdir_index] if @curdir_index >= 0
    rc
  end
end

# Define custom functions that can be called on keypresses in Readline. This is a bit of a hack:
# we define methods on RbReadline, and then use rl_bind_keyseq_if_unbound to tell readline to
# run the method with that name in RbReadline. RbReadline uses Kernel.send to make the call.
module RbReadline
  def self.rl_dir_forward(count, key)
    rl_replace_line "cdf", false
    @rl_done = true
    0
  end

  def self.rl_dir_back(count, key)
    rl_replace_line "cdb", false
    @rl_done = true
    0
  end

  def self.rl_dir_up(count, key)
    rl_replace_line "cdup", false
    @rl_done = true
    0
  end
end

class RubyShell

  def initialize
    @dirhistory = DirHistory.new
    @default_term_attrs = nil
    @builtins = %w(exit cd cdf cdb jobs fg)
    @color = TermColor.new
  end

  def run
    @dirhistory.cd File.absolute_path(Dir.pwd)
    @job_control = JobControl.new

    # Bind ALT-Right to call rl_dir_forward
    RbReadline.rl_bind_keyseq_if_unbound("\e[3C", :rl_dir_forward)
    RbReadline.rl_bind_keyseq_if_unbound("\e[3D", :rl_dir_back)
    RbReadline.rl_bind_keyseq_if_unbound("\e[3A", :rl_dir_up)
    RbReadline.rl_bind_keyseq_if_unbound("\e[1;3C", :rl_dir_forward)
    RbReadline.rl_bind_keyseq_if_unbound("\e[1;3D", :rl_dir_back)
    RbReadline.rl_bind_keyseq_if_unbound("\e[1;3A", :rl_dir_up)

    Readline.completion_append_character = ""
    # Allow $ inside words so that we can tell if we are replacing an env var
    Readline.completer_word_break_characters = Readline.basic_word_break_characters.tr "$",""
    Readline.completion_proc = Proc.new do |str|
      if Readline.point > 0
        
        if str =~ /\$(\w+)/
          # Complete the environment variable
          ENV.collect{ |k,v| "$#{k}"}.find_all{ |k,v| k[0,str.length] == str }
        else
          completing_first_word = Readline.line_buffer[0,Readline.point].index(' ').nil?

          if completing_first_word
            complete_command(str)
          else
            # Complete for file
            str = replace_tilde_with_homedir(str)
            Dir[str+'*'].grep( /^#{Regexp.escape(str)}/ ).collect! do |e| 
              File.directory?(e) ? e + "/" : e
            end
          end
        end
      else
        []
      end
    end


    while true
      begin
        @job_control.update_job_status do |job_process|
          notify_job_status(job_process)
        end

        line = nil
        line = Readline.readline(prompt, true)

        # Exit on EOF
        break if ! line

        line.strip!
        next if line.length == 0

        tokens = line.split(/\s+/)

        next if check_and_handle_builtin(tokens)

        if line[0,1] == '!'
          line = line[1,line.length]
          result = eval line
          if result.is_a? String
            puts result
          else
            pp result
          end
        else
          line = expand_parameters(line)
          run_cmd line
        end
      rescue Exception
        puts "#{$shell_name}: #{$!}"
        puts $!.backtrace.join "\n" if $verbose
      end
    end

    puts
  end

  private

  def run_cmd(cmd)

    state = :foreground
    if cmd =~ /(.*)&$/
      state = :background
      cmd = $1
    end

    job_process = @job_control.launch_process(cmd, state)
    notify_job_status(job_process)
  end

  def check_and_handle_builtin(tokens)
    handled = true
    if tokens.first == "exit"
      exit 0
    elsif tokens.first == "cd"
      begin
        if tokens.length > 0
          Dir.chdir tokens[1]
        else
          Dir.chdir
        end
        @dirhistory.cd File.absolute_path(Dir.pwd)
      rescue Errno::ENOENT
      end
    elsif tokens.first == "cdf"
      @dirhistory.forward
      puts
    elsif tokens.first == "cdb"
      @dirhistory.back
      puts
    elsif tokens.first == "cdup"
      Dir.chdir ".."
      @dirhistory.cd File.absolute_path(Dir.pwd)
      puts
    elsif tokens.first == "jobs"
      @job_control.processes.each do |pid, job_process|
        puts "[#{job_process.id}] #{job_process.cmd} [pid #{job_process.pid}] (#{job_process.status})"
      end
    elsif tokens.first == "fg"
      job_process = nil
      if tokens.length == 1
        if @job_control.last_stopped_job_pid && @job_control.processes[@job_control.last_stopped_job_pid]
          job_process = @job_control.processes[@job_control.last_stopped_job_pid]
        else
          # Find first stopped job
          job_process = @job_control.processes.values.find{ |j| j.stopped? }
        end
      else
        job_id = tokens[1].to_i
        job_process = @job_control.processes.values.find{ |j| j.id == job_id }
      end

      if job_process
        @job_control.put_in_foreground(job_process.pid, true) if job_process.stopped?
        notify_job_status(job_process)
      else
        puts "#{$shell_name}: No such job"
      end

    else
      handled = false
    end
    handled
  end

  def notify_job_status(job_process)
    if job_process.stopped?
      puts "Job '#{job_process.cmd}' stopped"
    else
      puts "Job '#{job_process.cmd}' completed" if job_process.fg_or_bg == :background
    end
  end

  def complete_command(cmd)
    matches = []
    m = @builtins.collect do |e|
      if e[0,cmd.length] == cmd
        e
      else
        nil
      end
    end
    matches = matches.concat(m.compact)

    ENV["PATH"].split(":").each do |dir|
      next if ! File.exists?(dir)
      
      m = Dir.new(dir).collect do |e|
        match = nil
        if e[0,1] != '.'
          match = e if e[0,cmd.length] == cmd
        end
        match
      end
      matches = matches.concat(m.compact)
    end
    
    # Append space to commands so that user can keep typing
    matches.collect!{ |e| e + " "}
    
    matches
  end

  def replace_homedir_with_tilde(path)
    path.gsub(ENV["HOME"],'~')
  end

  def replace_tilde_with_homedir(path)
    path.gsub('~',ENV["HOME"])
  end

  # Perform $ expansion
  def expand_parameters(str)
    str.gsub(/\$(\w+)/){ENV[$1]}
  end

  def prompt
    p = "{124}#{Etc.getlogin}@#{`hostname -s`.chomp}{d}:{29}#{replace_homedir_with_tilde(Dir.pwd)}{d}$ "
    @color.colorize_with_escapes(p)
  end

end

RubyShell.new.run
