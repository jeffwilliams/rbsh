#!/usr/bin/env ruby
# http://www.gnu.org/software/libc/manual/html_node/Implementing-a-Shell.html

# rb-readline gem. Tested with version 0.5.
require 'rb-readline'
require 'etc'
# ruby-termios. 0.9.6
require 'termios'
require 'getoptlong'
require 'pp'
require 'rbsh/job_control'
require 'rbsh/termcolor'
require 'rbsh/builtins'
require 'rbsh/tokenizer'

include Rbsh

$shell_name = "rbsh"
$verbose = false

opts = GetoptLong.new(
  [ '--verbose', '-v', GetoptLong::NO_ARGUMENT ],
) 

opts.each do |opt, arg|
  if opt == '--verbose'
    $verbose = true    
  end 
end   


class DirHistory
  def initialize(maxlen = 100)
    @maxlen = maxlen
    @history = []
    @curdir_index = -1
  end

  def forward
    if @curdir_index < @history.length-1
      @curdir_index += 1
      Dir.chdir @history[@curdir_index]
    end 
  end

  def back
    if @curdir_index > 0
      @curdir_index -= 1
      Dir.chdir @history[@curdir_index]
    end
  end

  def cd(dir)
    return if curdir == dir
    if @curdir_index < @history.length-1
      @history.pop @history.length-1-@curdir_index
    end

    @history.push dir
    @curdir_index += 1

    @history.shift(@maxlen-@history.length) if @history.length > @maxlen
  end

  def curdir
    @history[@curdir_index]
  end

  def to_s
    rc = Array.new(@history)
    rc[@curdir_index] = "*" + rc[@curdir_index] if @curdir_index >= 0
    rc
  end
end

# Define custom functions that can be called on keypresses in Readline. This is a bit of a hack:
# we define methods on RbReadline, and then use rl_bind_keyseq_if_unbound to tell readline to
# run the method with that name in RbReadline. RbReadline uses Kernel.send to make the call.
module RbReadline
  def self.rl_dir_forward(count, key)
    rl_replace_line "cdf", false
    @rl_done = true
    0
  end

  def self.rl_dir_back(count, key)
    rl_replace_line "cdb", false
    @rl_done = true
    0
  end

  def self.rl_dir_up(count, key)
    rl_replace_line "cdup", false
    @rl_done = true
    0
  end
end

class RubyShell

  RCFILE = "#{ENV['HOME']}/.rbshrc"

  def initialize
    @dirhistory = DirHistory.new
    @default_term_attrs = nil
    @color = TermColor.new
  end

  def run
    @dirhistory.cd File.absolute_path(Dir.pwd)
    @job_control = JobControl.new
    @builtins = Builtins.new(@dirhistory, @job_control, method(:notify_job_status))

    source_script(RCFILE) if File.exists?(RCFILE)

    # Bind ALT-Right to call rl_dir_forward
    RbReadline.rl_bind_keyseq_if_unbound("\e[3C", :rl_dir_forward)
    RbReadline.rl_bind_keyseq_if_unbound("\e[3D", :rl_dir_back)
    RbReadline.rl_bind_keyseq_if_unbound("\e[3A", :rl_dir_up)
    RbReadline.rl_bind_keyseq_if_unbound("\e[1;3C", :rl_dir_forward)
    RbReadline.rl_bind_keyseq_if_unbound("\e[1;3D", :rl_dir_back)
    RbReadline.rl_bind_keyseq_if_unbound("\e[1;3A", :rl_dir_up)
    # In puTTY, ALT-arrow keys are sent as the arrow key sequence with a preceeding escape (i.e. \e\e[D).
    # Unfortunately in Emacs key bindings in Ruby-Readline, \e\e is mapped to :rl_complete.
    # To get around this, we unmap \e\e by mapping it to nil, and then map our longer sequences.
    RbReadline.rl_bind_key("\e\e", nil)
    RbReadline.rl_bind_key("\e\e[C", :rl_dir_forward)
    RbReadline.rl_bind_key("\e\e[D", :rl_dir_back)
    RbReadline.rl_bind_key("\e\e[A", :rl_dir_up)

    Readline.completion_append_character = ""
    # Allow $ inside words so that we can tell if we are replacing an env var
    Readline.completer_word_break_characters = Readline.basic_word_break_characters.tr "$",""
    Readline.completion_proc = Proc.new do |str|
      if Readline.point > 0
        str = replace_tilde_with_homedir(str)
        
        if str =~ /\$(\w+)/
          # Complete the environment variable
          ENV.collect{ |k,v| "$#{k}"}.find_all{ |k,v| k[0,str.length] == str }
        else
          completing_first_word = Readline.line_buffer[0,Readline.point].index(' ').nil?

          if completing_first_word
            complete_command(str)
          else
            # Complete for file
            str = replace_tilde_with_homedir(str)
            Dir[str+'*'].grep( /^#{Regexp.escape(str)}/ ).collect! do |e| 
              File.directory?(e) ? e + "/" : e
            end
          end
        end
      else
        []
      end
    end

    while true
      begin
        @job_control.update_job_status do |job_process|
          notify_job_status(job_process)
        end

        line = nil
        line = Readline.readline(prompt, true)

        # Exit on EOF
        if ! line
          @builtins.exit
          next
        end

        line.strip!
        if line.length == 0
          Readline::History.pop
          next
        end

        line = expand(line)
        tokens = Tokenizer.tokenize line

        next if check_and_handle_builtin(tokens)

        if line[0,1] == '!'
          line = line[1,line.length]
          result = eval line
          if result.is_a? String
            puts result
          else
            pp result
          end
        else
          run_cmd line
        end
      rescue Exception
        puts "#{$shell_name}: #{$!}"
        puts $!.backtrace.join "\n" if $verbose
      end
    end

    puts
  end

  private

  def run_cmd(cmd)

    state = :foreground
    if cmd =~ /(.*)&$/
      state = :background
      cmd = $1
    end

    job_process = @job_control.launch_process(cmd, state)
    notify_job_status(job_process)
  end

  def check_and_handle_builtin(tokens)
    return false if tokens.size == 0

    cmd = tokens.shift.to_sym
    return false if ! @builtins.respond_to?(cmd)

    @builtins.public_send cmd, *tokens
    true
  end

  def notify_job_status(job_process)
    if job_process.stopped?
      puts "Job '#{job_process.cmd}' stopped"
    else
      puts "Job '#{job_process.cmd}' completed" if job_process.fg_or_bg == :background
    end
  end

  def complete_command(cmd)

    return complete_command_with_dir(cmd) if cmd.index("/")

    matches = []
    m = @builtins.public_methods(false).collect do |e|
      e = e.to_s
      if e[0,cmd.length] == cmd
        e
      else
        nil
      end
    end
    matches = matches.concat(m.compact)

    ENV["PATH"].split(":").each do |dir|
      next if ! File.exists?(dir)
      
      m = Dir.new(dir).collect do |e|
        match = nil
        if e[0,1] != '.'
          match = e if e[0,cmd.length] == cmd
        end
        match
      end
      matches = matches.concat(m.compact)
    end
    
    # Append space to commands so that user can keep typing
    matches.collect!{ |e| e + " "}
    
    matches
  end

  def complete_command_with_dir(cmd)
    dirname = File.dirname(cmd + " ")
    r = Dir.entries(dirname).collect{ |e| dirname + '/' + e}.find_all do |e| 
      if e != "." && e != ".." 
        (File.executable?(e) || File.directory?(e)) && e[0,cmd.length] == cmd
      else
        false
      end
    end
    r
  end

  def replace_homedir_with_tilde(path)
    path.gsub(ENV["HOME"],'~')
  end

  def replace_tilde_with_homedir(path)
    path.gsub('~',ENV["HOME"])
  end

  # Perform $ expansion
  def expand_parameters(str)
    str.gsub(/\$(\w+)/){ENV[$1]}
  end

  def expand_ruby(str)
    str.gsub(/!([^!]+)!/){eval($1).to_s}
  end

  def expand(str)
    replace_tilde_with_homedir(expand_parameters(expand_ruby(str)))
  end

  def source_script(path)
    begin
      eval File.read(path), binding, path
    rescue Exception
      puts "#{$shell_name}: sourcing script #{path} failed: #{$!}"
    end
  end

  def prompt
    # rb-readline expects non-visible characters to be enclosed between the characters \x01 and \x02. 
    p = "\x01{124}\x02#{Etc.getlogin}@#{`hostname -s`.chomp}\x01{d}\x02:\x01{29}\x02#{replace_homedir_with_tilde(Dir.pwd)}\x01{d}\x02$ "
    @color.colorize_with_escapes(p)
  end

end

RubyShell.new.run
